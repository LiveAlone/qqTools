


@Transactional(value = TransactionMode.ROLLBACK, transactionManagerName = ConfigInFile.TRANSACTION_MANAGER_DATA)
public class {{singleClass.className}}MapperTest extends UnitilsDaoTestBase<{{singleClass.className}}> {

    private static final String PREFIX_URI = DATA_URI_PREFIX + "TODO appraise/{{singleClass.className}}Mapper/";

    @Test
    @DataSet(value = PREFIX_URI + "{{singleClass.className}}MapperTest-empty.xml", loadStrategy = CleanInsertLoadStrategy.class)
    @ExpectedDataSet(value = PREFIX_URI + "{{singleClass.className}}MapperTest-testInsert-expected.xml", databaseName = "{{databaseName}}")
    public void testInsert() {
        orderCourseAppraiseMapper.insert(buildDomain());
    }    

	@Override
	protected {{singleClass.className}} buildDomain() {
		{{singleClass.className}} {{singleClass.lowClassName}} = new {{singleClass.className}}();
		orderCourseAppraise.setOrderCourseId(defaultOrderCourseId);
		orderCourseAppraise.setTeacherId(defaultTeacherId);
		orderCourseAppraise.setStudentId(defaultStudentId);
		orderCourseAppraise.setStudentAppraiseTime(JodaTimeUtil.stringToDate("2017-03-19 02:03:02", JodaTimeUtil.DEFAULT_TIME_FORMAT));
		orderCourseAppraise.setQualityOfCourse(7);
		orderCourseAppraise.setQualityOfService(9);
		orderCourseAppraise.setQualityOfEffect(8);
		orderCourseAppraise.setEffectTime(JodaTimeUtil.stringToDate("2017-03-22 04:05:06", JodaTimeUtil.DEFAULT_TIME_FORMAT));
		orderCourseAppraise.setPhraseIds(Arrays.asList(1L,2L));
		orderCourseAppraise.setIsSelection(true);
		orderCourseAppraise.setGradeId(2);
		orderCourseAppraise.setCourseId(1);
		orderCourseAppraise.setTeacherAppraiseTime(JodaTimeUtil.stringToDate("2017-03-20 01:01:02", JodaTimeUtil.DEFAULT_TIME_FORMAT));
		orderCourseAppraise.setFromNew(true);
		orderCourseAppraise.setViolateServicePrincipleIds(Arrays.asList(3L,4L));
		orderCourseAppraise.setViolateServicePrincipleReason("棒棒的");
		orderCourseAppraise.setIsAutoComment(false);
		return {{singleClass.lowClassName}};
	}

}